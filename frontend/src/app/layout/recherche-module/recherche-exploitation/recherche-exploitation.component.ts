import { DatePipe } from "@angular/common";
import { Component, OnInit, ViewChild } from '@angular/core';
import { FormControl } from "@angular/forms";
import { MatDialog } from '@angular/material/dialog';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatTableDataSource } from '@angular/material/table';
import { Router } from "@angular/router";
import { debounceTime, distinctUntilChanged, switchMap } from "rxjs";
import { Exploitation } from 'src/app/core/interfaces/exploitation';
import { ExploitationService } from 'src/app/core/services/exploitation.service';
import { ModalService } from 'src/app/core/services/modal.service';
import { BuilderDtoJsonAbstract } from "../../../core/interfaces/BuilderDtoJsonAbstract";
import { AutocompleteRecherche } from "../../../core/interfaces/autocomplete.recherche";
import { CritereRecherche } from "../../../core/interfaces/critere.recherche";
import { AppConfigService } from "../../../core/services/app-config.service";
import { AutocompleteRechercheService } from "../../../core/services/autocomplete.recherche.service";
import { SuppressionComponent } from '../../shared-Module/dialog/suppression/suppression.component';
import {CdkVirtualScrollViewport} from "@angular/cdk/scrolling";

@Component({
  selector: 'recherche-exploitation',
  templateUrl: './recherche-exploitation.component.html',
  styleUrls: ['./recherche-exploitation.component.scss']
})
export class RechercheExploitationComponent  implements OnInit {
  search:FormControl =new FormControl('');
  /** la liste des exploitations */
  listExploitations: MatTableDataSource<Exploitation>;

  // La pagination
  @ViewChild(MatPaginator) paginator: MatPaginator;
  @ViewChild(MatSort) sort: MatSort;

  pageSize = 10; // nb ligne par page par défaut
  itemSize:number=0
  totalItems = 10;
  page = 0;
  size = 10;
  itemsPerPage = 10;
  newPage=0
  croll:boolean=false;
  private lastScrollIndex = 0;
  displayedColumns: string[] = ['id','Nom', 'Région', 'Date Création','actions'];
  exploitations$=this.exploitationService.exploitations$;
  nb$=this.exploitationService.nbExploitations$
  rechercheSuggestions$=this.autocompleteRechercheService.autoCompleteRecherchesExploitation$
  critereRecherches$=this.autocompleteRechercheService.critereRecherchesExploitation$
 /** exploitation Service */
 constructor(public appConfig: AppConfigService,public exploitationService: ExploitationService,private router:Router,
  private dialog: MatDialog, private modalService: ModalService, private autocompleteRechercheService:AutocompleteRechercheService){}

 ngOnInit(): void {
   this.exploitationService.setExploitations([])
   this.rechargementSiteExploitation()

   this.exploitationService.exploitations$.subscribe((exploitations) => {
   this.listExploitations = new MatTableDataSource<Exploitation>(exploitations);
   this.listExploitations.sort=this.sort;
   this.itemSize=exploitations.length
     this.totalItems = 100;
   })
   this.search.valueChanges?.pipe(
     debounceTime(300),
     distinctUntilChanged(),
     switchMap((capture) => {
       this.page=0
       this.newPage=0;
       this.croll=false;
       return this.autocompleteRechercheService.autocompleteSiteExploitation(capture);
     })
   ).subscribe();

 }


  chargerSiteExploitation(exploitation: Exploitation){
    this.router.navigate(['admin/exploitation'], {queryParams: {'contextInfo':exploitation.id }});
  }
  ouvreNouveauSiteExploitation(){
    this.router.navigate(['admin/exploitation']);
  }
  initial(exploitation: Exploitation){
    return exploitation.nom.charAt(0).toUpperCase()
  }
  formatDate(dateCreation: Date) {
    return (new DatePipe(BuilderDtoJsonAbstract.JSON_DATE_PIPE_LOCALE))
      .transform(dateCreation, BuilderDtoJsonAbstract.DATE_FORMAT_SIMPLEJSON);
  }
  ajouterFiltre(autocompleteRecherche:AutocompleteRecherche){
    this.autocompleteRechercheService.addAutocompleteRechercheExploitation(autocompleteRecherche)
  }
  annulerFiltre(autocompleteRecherche:AutocompleteRecherche){
    this.autocompleteRechercheService.removeAutocompleteRechercheExploitation(autocompleteRecherche)
  }

  rechargementSiteExploitation(){
    this.critereRecherches$.subscribe((res)=>{
      if(res.length>0) {
        const critereRecherche:CritereRecherche   = {
          autocompleteRecherches:res,
          page :this.newPage,
          size :this.size,
          dateDebut :new Date(),
          dateFin :new Date(),
        } as CritereRecherche
        this.exploitationService.chargementExploitationParCritere(critereRecherche,this.croll).subscribe((res)=>{

        })
      }
    })
  }

  /**
   * supprimerSiteExploitation
   * @param site
   */
  supprimerSiteExploitation(siteExploitation: Exploitation){

      const dialogRef = this.dialog.open(SuppressionComponent, {
        width: '600px',
        position: {top:'200px'},
        data: {name: "le site d'exploitation ".concat(siteExploitation.nom), id: siteExploitation.id},
      });

      dialogRef.afterClosed().subscribe(result => {
        if (result >= 0) {
          this.exploitationService.supprimerExploitation(siteExploitation.id).subscribe((idDelete) => {
            if (idDelete) {
              this.rechargementSiteExploitation();
              this.modalService.ouvrirModalConfirmation("Site d'exploitation supprimé")
            }
          });
        }
    });
  }

  onScrollEnd(index: number) {

    const isScrollingDown = index > this.lastScrollIndex;
    this.lastScrollIndex = index;
    if (isScrollingDown) {
      this.page++
      const totalLoadedItems = this.page * this.itemsPerPage;
      const newIndex = Math.floor(totalLoadedItems / this.itemsPerPage)
      this.newPage=newIndex
      this.croll=true
      this.rechargementSiteExploitation();
    }
  }
  getItemSize() {
    return 50;
  }
}
