package sn.dscom.backend.service.converter;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import sn.dscom.backend.common.dto.ExploitationDTO;
import sn.dscom.backend.common.util.pojo.Transformer;
import sn.dscom.backend.database.entite.ExploitationEntity;

import java.util.Date;

/**
 * class de test {@link ExploitationConverterTest}
 */
class ExploitationConverterTest {

    /**
     * explitation Converteur
     */
    Transformer<ExploitationDTO, ExploitationEntity> explitationConverteur = new ExploitationConverter();

    /**
     * reverse
     */
    @Test
    void reverse() {

        //GIVEN
        ExploitationEntity expected = ExploitationEntity.builder()
                .id(1L)
                .dateCreation(new Date())
                .dateModification(new Date())
                .nom("nom".toUpperCase())
                .region("region".toUpperCase())
                .build();
        //WHEN
        ExploitationDTO actual = this.explitationConverteur.reverse(expected);

        //THEN
        Assertions.assertAll(
                () -> Assertions.assertEquals(expected.getId(), actual.getId()),
                () -> Assertions.assertEquals(expected.getDateModification(), actual.getDateModification()),
                () -> Assertions.assertEquals(expected.getDateCreation(), actual.getDateCreation()),
                () -> Assertions.assertEquals(expected.getNom(), actual.getNom()),
                () -> Assertions.assertEquals(expected.getRegion(), actual.getRegion())
        );
    }

    /**
     * reverse
     */
    @Test
    void transform() {

        //GIVEN
        ExploitationDTO expected = ExploitationDTO.builder()
                .id(1L)
                .dateCreation(new Date())
                .dateModification(new Date())
                .nom("nom".toUpperCase())
                .region("region".toUpperCase())
                .build();

        //WHEN
        ExploitationEntity actual = this.explitationConverteur.transform(expected);

        //WHEN
        Assertions.assertAll(
                () -> Assertions.assertEquals(expected.getId(), actual.getId()),
               // () -> Assertions.assertNotEquals(expected.getDateModification(), actual.getDateModification()),
                () -> Assertions.assertEquals(expected.getDateCreation(), actual.getDateCreation()),
                () -> Assertions.assertEquals(expected.getNom(), actual.getNom()),
                () -> Assertions.assertEquals(expected.getRegion(), actual.getRegion())
        );
    }
}
