package sn.dscom.backend.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentMatchers;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.MediaType;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.RequestBuilder;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import sn.dscom.backend.common.dto.ExploitationDTO;
import sn.dscom.backend.service.interfaces.IExploitationService;

import java.util.Arrays;
import java.util.Optional;

/**
 * Categorie Controller Test
 */
@WebMvcTest
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
class ExploitationControllerTest {

    /**
     * Class de confif
     */
    @Configuration
    static class ExploitationControllerTestConfiguration
    {
        /**
         * bean
         * @return le bean
         */
        @Bean
        public IExploitationService createExploitationService(){

            IExploitationService mock = Mockito.mock(IExploitationService.class, Mockito.RETURNS_DEEP_STUBS);
            // mock rechercherCategories
            Mockito.when(mock.rechercherSitesExploitation()).thenReturn(Optional.of(Arrays.asList(ExploitationDTO.builder().nom("THIES1").build())));

            // mock enregistrerCategorie
            Mockito.when(mock.enregistrerSiteExploitation(ArgumentMatchers.any())).thenReturn(Optional.of(ExploitationDTO.builder().nom("THIES1").build()));

            // mock rechercherCategorie
            Mockito.when(mock.rechercherSiteExploitation(ArgumentMatchers.any())).thenReturn(Optional.of(Arrays.asList(ExploitationDTO.builder().nom("THIES1").build())));

            // mock supprimerCategorie
            Mockito.when(mock.supprimerSiteExploitation(ArgumentMatchers.any())).thenReturn(true);

            // mock compterCategorie
            Mockito.when(mock.compterSiteExploitation(ArgumentMatchers.any())).thenReturn(1);

            return mock;
        }

        @Bean
        public ExploitationController exploitationController(){
            return new ExploitationController();
        }

    }

    /**
     * vehiculeController
     */
    @Autowired
    private ExploitationController exploitationController;

    /**
     * mockMvc
     */
    MockMvc mockMvc;

    /**
     * BeforeEach
     */
    @BeforeEach
    void setUp() {

        this.mockMvc = MockMvcBuilders.standaloneSetup(this.exploitationController).build();
    }

    /**
     * enregistrerExploitation
     * @throws Exception
     */
    @Test
    void enregistrerExploitation() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();
        String json = objectMapper.writeValueAsString(ExploitationDTO.builder().id(1L).build());
        RequestBuilder requestBuilder = MockMvcRequestBuilders
                .post("/api/v1/exploitation/enregistrer")
                .content(json)
                .contentType(MediaType.APPLICATION_JSON_VALUE);

        ResultActions resultActions = this.mockMvc.perform(requestBuilder);

        resultActions.andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath("$.nom").value("THIES1"));
    }

    /**
     * rechercherSiteExploitation
     * @throws Exception
     */
    @Test
    void rechercherSiteExploitation() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();
        String json = objectMapper.writeValueAsString(ExploitationDTO.builder().id(1L).build());
        RequestBuilder requestBuilder = MockMvcRequestBuilders
                .get("/api/v1/exploitation/rechercherById/1")
                .content(json)
                .param("id","1")
                .contentType(MediaType.APPLICATION_JSON_VALUE);

        ResultActions resultActions = this.mockMvc.perform(requestBuilder);

        resultActions.andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath("$[0].nom").value("THIES1"));
    }

    /**
     * rechercherSitesExploitation
     * @throws Exception
     */
    @Test
    void rechercherSitesExploitation() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();
        RequestBuilder requestBuilder = MockMvcRequestBuilders
                .get("/api/v1/exploitation/rechercher")
                .contentType(MediaType.APPLICATION_JSON_VALUE);

        ResultActions resultActions = this.mockMvc.perform(requestBuilder);

        resultActions.andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath("$.length()").value(1))
                .andExpect(MockMvcResultMatchers.jsonPath("$.[0].nom").value("THIES1"));
    }

    /**
     * supprimerSiteExploitation
     * @throws Exception
     */
    @Test
    void supprimerSiteExploitation() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();
        RequestBuilder requestBuilder = MockMvcRequestBuilders
                .delete("/api/v1/exploitation/supprimer/1")
                .param("id","1")
                .contentType(MediaType.APPLICATION_JSON_VALUE);

        ResultActions resultActions = this.mockMvc.perform(requestBuilder);

        resultActions.andExpect(MockMvcResultMatchers.status().isOk());
    }

    /**
     * getCompteurSitesExploitation
     * @throws Exception
     */
    @Test
    void getCompteurSitesExploitation() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();
        RequestBuilder requestBuilder = MockMvcRequestBuilders
                .get("/api/v1/exploitation/compter")
                .contentType(MediaType.APPLICATION_JSON_VALUE);

        ResultActions resultActions = this.mockMvc.perform(requestBuilder);

        resultActions.andExpect(MockMvcResultMatchers.status().isOk());
    }
}