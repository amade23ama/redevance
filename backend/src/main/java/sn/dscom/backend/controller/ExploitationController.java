package sn.dscom.backend.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import sn.dscom.backend.common.dto.ExploitationDTO;
import sn.dscom.backend.service.interfaces.IExploitationService;

import java.time.LocalDateTime;
import java.util.List;

/**
 * @apiNote Controller REST des opérations sur la fonctionnalité des sites exploitation
 * @version 1
 */
@RestController
@RequestMapping("/api/v1/exploitation")
public class ExploitationController {

    /** Logger Factory */
    private static final Logger logger = LoggerFactory.getLogger(ExploitationController.class);

    /**
     * exploitation Service
     */
    @Autowired
    private IExploitationService exploitationService;

    /**
     * enregistrer Exploitation
     * @param exploitationDTO exploitationDTO
     * @return le site d'exploitation
     */
    @PostMapping(path = "/enregistrer")
    @PreAuthorize("hasAnyRole('ADMIN','EDIT')")
    public ResponseEntity<ExploitationDTO> enregistrerExploitation(@RequestBody ExploitationDTO exploitationDTO) {
        ExploitationController.logger.info("ExploitationController: enregistrerExploitation");
        return ResponseEntity.ok(this.exploitationService.enregistrerSiteExploitation(exploitationDTO).get());
    }

    /**
     * rechercher Site par id
     * @param id du site à rechercher
     * @return le site trouvé
     */
    @GetMapping(path = "/rechercherById/{id}")
    @PreAuthorize("hasAnyRole('ADMIN','CONSULT','EDIT')")
    public ExploitationDTO rechercherSiteExploitation(@PathVariable long id) {
        ExploitationController.logger.info("ExploitationController: rechercherSiteExploitation");
        return  this.exploitationService.rechercherSiteExploitationbyId(id);
    }
    /**
     * rechercher Sites
     * @return la liste
     */
    @GetMapping(path = "/rechercher")
    @PreAuthorize("hasAnyRole('ADMIN','CONSULT','EDIT')")
    public ResponseEntity<List<ExploitationDTO>> rechercherSitesExploitation() {
        ExploitationController.logger.info("ExploitationController: rechercherSitesExploitation");
        return  ResponseEntity.ok(this.exploitationService.rechercherSitesExploitation().get());
    }

    /**
     * supprimer Site
     *
     * @param id id de l'entité
     * @return true si supprimé
     */
    //UPDATE ou DELETE sur la table « site » viole la contrainte de clé étrangère « fk_SITE » de la table « chargement »
    // @DeleteMapping(path = "/supprimer/{id}") // 80/api/v1/site/supprimer/2' from origin 'http://localhost:4200' has been blocked by CORS policy:
    @DeleteMapping(path = "/supprimer/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Boolean> supprimerSiteExploitation(@PathVariable long id) {
        ExploitationController.logger.info("ExploitationController: supprimerSiteExploitation");
        return  ResponseEntity.ok(this.exploitationService.supprimerSiteExploitation(ExploitationDTO.builder().id(id).build()));
    }

    /**
     * Compteur Sites
     *
     * @return le nombre de site
     */
    @GetMapping(path = "/compter")
    @PreAuthorize("hasAnyRole('ADMIN','CONSULT','EDIT')")
    public ResponseEntity<Integer> getCompteurSitesExploitation() {
        ExploitationController.logger.info("ExploitationController: Compter Site Exploitation");
        return  ResponseEntity.ok(this.exploitationService.compterSiteExploitation(LocalDateTime.now()));
    }

    /**
     * Permet de faire une recherche par nom, region ou par date
     * @param exploitationDTO les critères de recherche
     * @return les sites trouvés
     */
   @PostMapping(path = "/rechercherByCritere")
   @PreAuthorize("hasAnyRole('ADMIN','CONSULT','EDIT')")
    public ResponseEntity<List<ExploitationDTO>> rechercherSiteExploitation(@PathVariable ExploitationDTO exploitationDTO) {
        return  ResponseEntity.ok(this.exploitationService.rechercherSiteExploitation(exploitationDTO).get());
    }
}
