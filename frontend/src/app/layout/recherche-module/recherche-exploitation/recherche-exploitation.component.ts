import { Component, OnInit, ViewChild } from '@angular/core';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatTableDataSource } from '@angular/material/table';
import { Exploitation } from 'src/app/core/interfaces/exploitation';
import { ExploitationService } from 'src/app/core/services/exploitation.service';
import {Router} from "@angular/router";
import {AppConfigService} from "../../../core/services/app-config.service";
import {FormControl} from "@angular/forms";
import {Utilisateur} from "../../../core/interfaces/utilisateur";
import {DatePipe} from "@angular/common";
import {BuilderDtoJsonAbstract} from "../../../core/interfaces/BuilderDtoJsonAbstract";

@Component({
  selector: 'recherche-exploitation',
  templateUrl: './recherche-exploitation.component.html',
  styleUrls: ['./recherche-exploitation.component.scss']
})
export class RechercheExploitationComponent  implements OnInit {
  search:FormControl =new FormControl('');
  /** la liste des exploitations */
  listExploitations: MatTableDataSource<Exploitation>;

  // La pagination
  @ViewChild(MatPaginator) paginator: MatPaginator;
  @ViewChild(MatSort) sort: MatSort;

  // nombre de ligne par page
  pageSizeOptions: number[] = [5, 10, 20];
  pageSize = 5; // nb ligne par page par défaut

  // les noms des colones , 'Date Modification'
  displayedColumns: string[] = ['Nom', 'Région', 'Date Création','actions'];
  exploitations$=this.exploitationService.exploitations$;
 /** exploitation Service */
 constructor(public appConfig: AppConfigService,public exploitationService: ExploitationService,private router:Router){}


 ngOnInit(): void {
   this.exploitationService.getAllExploitations().subscribe();
   this.exploitationService.getCompteurExploitations().subscribe();

   this.exploitationService.exploitations$.subscribe((exploitations) => {
     console.log("les exploitations: ", exploitations);
     //alimentation du tableau
   this.listExploitations = new MatTableDataSource<Exploitation>(exploitations);
   this.listExploitations.paginator=this.paginator;
   this.listExploitations.sort=this.sort;
   })

   this.exploitationService.nbExploitations$.subscribe((nb) => {
     console.log("le nombre de exploitation: ", nb);
   })


 }


  chargerSiteExploitation(exploitation: Exploitation){
    this.router.navigate(['admin/exploitation'], {queryParams: {'contextInfo':exploitation.id }});
  }
  ouvreNouveauSiteExploitation(){
    this.router.navigate(['admin/exploitation']);
  }
  initial(exploitation: Exploitation){
    return exploitation.nom.charAt(0).toUpperCase()
  }
  formatDate(dateCreation: Date) {
    return (new DatePipe(BuilderDtoJsonAbstract.JSON_DATE_PIPE_LOCALE))
      .transform(dateCreation, BuilderDtoJsonAbstract.DATE_FORMAT_SIMPLEJSON);
  }
}
