package sn.dscom.backend.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import sn.dscom.backend.common.constants.Enum.ErreurEnum;
import sn.dscom.backend.common.dto.ExploitationDTO;
import sn.dscom.backend.common.exception.CommonMetierException;
import sn.dscom.backend.common.util.pojo.Transformer;
import sn.dscom.backend.database.entite.ExploitationEntity;
import sn.dscom.backend.database.repository.ExploitationRepository;
import sn.dscom.backend.service.converter.ExploitationConverter;
import sn.dscom.backend.service.interfaces.IExploitationService;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * @apiNote implémentation des operations sur les sites d'exploitation
 * @version 1
 */
@Service
@Transactional
public class ExploitationService implements IExploitationService {

    /**
     * exploitation Repository
     */
    @Autowired
    ExploitationRepository exploitationRepository;

    /**
     * explitation Converteur
     */
    Transformer<ExploitationDTO, ExploitationEntity> explitationConverteur = new ExploitationConverter();

    /**
     * Permet de modifier ou de creer un site Exploitation
     *
     * @param exploitationDTO le site à enregistrer ou à modifier
     * @return le site enregistrer
     */
    @Override
    public Optional<ExploitationDTO> enregistrerSiteExploitation(ExploitationDTO exploitationDTO) {
        //C'est la séquence qui génère l'id en cas de création
        return Optional.of(this.explitationConverteur.reverse(this.exploitationRepository.save(this.explitationConverteur.transform(exploitationDTO))));
    }

    /**
     * Retourne l'ensemble des sites d'Exploitation
     *
     * @return la liste des sites
     */
    @Override
    public Optional<List<ExploitationDTO>> rechercherSitesExploitation() {
        // On charge l'ensemble des site
        List<ExploitationEntity> listSitesFind = this.exploitationRepository.findAll();

        //retourne la liste
        return Optional.of(listSitesFind.stream()
                .map(siteEntity -> this.explitationConverteur.reverse(siteEntity))
                .filter(Objects::nonNull)
                .collect(Collectors.toList()));
    }

    /**
     * Permet de faire une recherche spécifique: exemple id
     *
     * @param exploitationDTO exploitationDTO
     * @return la liste trouvée
     */
    @Override
    public Optional<List<ExploitationDTO>> rechercherSiteExploitation(ExploitationDTO exploitationDTO) {

        //recherche par id
        if (exploitationDTO.getId() != null) {
            return Optional.of(Arrays.asList(this.explitationConverteur.reverse(this.exploitationRepository.findById(exploitationDTO.getId()).get())));
        }
        //TODO: a implementer pour d'autre recherche
        return Optional.empty();
    }

    /**
     * Permet de supprimer un site
     *
     * @param exploitationDTO exploitationDTO
     * @return true si supprimé
     */
    @Override
    public Boolean supprimerSiteExploitation(ExploitationDTO exploitationDTO) {
        try {
            // on supprime par id
            this.exploitationRepository.deleteById(exploitationDTO.getId());
            return true;
        }catch (Exception e){
            throw new CommonMetierException(HttpStatus.NON_AUTHORITATIVE_INFORMATION.value(), ErreurEnum.ERR_INATTENDUE);

        }
    }

    /**
     * Permet de comter le nombre de site en base
     *
     * @param dateMiseEnService dateMiseEnService
     * @return le nombre de site d'Exploitation
     */
    @Override
    public Integer compterSiteExploitation(LocalDateTime dateMiseEnService) {
        return exploitationRepository.compterSitePardate(dateMiseEnService);
    }

    @Override
    public ExploitationDTO rechercherSiteExploitationbyId(long id) {

        try {
            Optional<ExploitationEntity> exploitationEntity = exploitationRepository.findById(id);
            if (exploitationEntity.isPresent()) {
                return this.explitationConverteur.reverse(exploitationEntity.get());
            }
            throw new CommonMetierException(HttpStatus.NOT_FOUND.value(), ErreurEnum.ERR_INATTENDUE);
        } catch (CommonMetierException e) {
            //todo
            throw e;

        }
    }
}