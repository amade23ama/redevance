import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { BehaviorSubject, catchError, tap, throwError } from 'rxjs';
import { environment } from 'src/environments/environment';
import { Globals } from "../../app.constants";
import { CritereRecherche } from "../interfaces/critere.recherche";
import { Exploitation } from '../interfaces/exploitation';
import { NotificationService } from "./notification.service";
import {Page} from "../interfaces/page";
import {Chargement} from "../interfaces/chargement";

@Injectable({
  providedIn: 'root'
})
/**
 * Service gerant les appels HTTP aux webservices exploitation Exploitation.
 */
export class ExploitationService {

  /** les exploitations trouvés */
  private _Exploitations: BehaviorSubject<Exploitation[]> = new BehaviorSubject<Exploitation[]>( []);

   /** le nombre de exploitation */
   private _nbExploitations: BehaviorSubject<number> = new BehaviorSubject<number>(null);

   /** les exploitations trouvés by id */
  private _ExploitationById: BehaviorSubject<Exploitation> = new BehaviorSubject<Exploitation>(null);

   /** le exploitation enregistrer */
   private _ExploitationEnregistrer: BehaviorSubject<Exploitation> = new BehaviorSubject<Exploitation>(null);

  /** url de base des webservices exploitation */
  private url = environment.apiUrl + '/v1/exploitation';
  exploitationCourant: Exploitation = new Exploitation();
  constructor(private httpClient: HttpClient,private notification: NotificationService, private globals: Globals) { }

  /**
   * appel du service rechercherExploitations pour rechercher la liste des véhicules
   * @returns la liste des Exploitation
   */
  /*
  getAllExploitations(){
    return this.httpClient.get<Exploitation[]>(this.url + '/rechercher')
    .pipe(
      tap((res:Exploitation[])=> {
        this.setExploitations(res);
      }),
      catchError((err) => {
        return throwError(() => err) // RXJS 7+
      })
    )
  }
  */

  /** la liste des exploitations de dépot */
  get exploitations$(){
    return this._Exploitations.asObservable()
  }

  /** setExploitations */
  setExploitations(exploitations: Exploitation[] ){
    return this._Exploitations.next(exploitations)
  }

  /**
   * appel du service compterExploitation
   * @returns la nombre de exploitation
   */
  getCompteurExploitations(){
    return this.httpClient.get<number>(this.url + '/compter')
    .pipe(
      tap((res:number)=> {
        this.setNbExploitations(res);
      }),
      catchError((err) => {
        return throwError(() => err)
      })
    )
  }

  /** la liste des exploitations de dépot */
  get nbExploitations$(){
    return this._nbExploitations.asObservable()
  }

  /** setExploitations */
  setNbExploitations(nombre: number ){
    return this._nbExploitations.next(nombre)
  }

  /**
   * appel du service rechercherExploitations pour rechercher la liste des véhicules
   * @returns la liste des Exploitation
   */
  getExploitationById(id: number){
    return this.httpClient.get<Exploitation>(this.url + `/rechercherById/${id}`)
    .pipe(
      tap((res:Exploitation)=> {
        this.setExploitationCourant(Exploitation.fromJson(res,Exploitation) )
       // this.setExploitationById(res[0]);
      }),
      catchError((err) => {
        this.notification.error("erreur de chargement du site exploitation")
        return throwError(() => err)
      })
    )
  }

  /** la liste des exploitations de dépot */
  get exploitationById$(){
    return this._ExploitationById.asObservable()
  }

  /** setExploitations */
  setExploitationById(exploitation: Exploitation){
    return this._ExploitationById.next(exploitation)
  }

  /**
   * appel du service rechercherExploitations pour rechercher la liste des véhicules
   * @returns la liste des Exploitation
   */
  supprimerExploitation(id: number){
    return this.httpClient.delete<boolean>(this.url + `/supprimer/${id}`)
    .pipe(
      tap((res:boolean)=> {
        this.notification.success("suppression du site exploitation");
        this.removeExploitation(id)
      }),
      catchError((err) => {
        this.notification.error("Erreur lors de la suppression du  site d'exploitation");
        return throwError(() => err) // RXJS 7+
      })
    )
  }

  /**
   * appel du service enregistrerExploitation pour définir un exploitation
   * @param exploitation à enregistrer
   * @returns exploitation enregistré
   */
  enregistrerExploitation(exploitation: Exploitation){
    return this.httpClient.post<Exploitation>(this.url + '/enregistrer', exploitation).pipe(
      tap((res:Exploitation)=> {
        this.notification.success("le site d'exploitation est enregistré avec sucess")
        this.setExploitationEnregistrer(res);
      }),
      catchError((err) => {
        this.notification.error("erreur enregistrement du  site d'exploitation")
        return throwError(() => err) // RXJS 7+
      })
    );
  }

  /** ExploitationEnregistre */
  get ExploitationEnregistre$(){
    return this._ExploitationEnregistrer.asObservable()
  }

  /** setExploitationEnregistrer */
  setExploitationEnregistrer(exploitation:Exploitation){
    return this._ExploitationEnregistrer.next(exploitation)
  }
  setExploitationCourant(exploitation:Exploitation) {
    this.exploitationCourant = exploitation
  }
  getExploitationCourant() {
    return this.exploitationCourant;
  }

  chargementExploitationParCritere(critereRecherche:CritereRecherche,scroll?: boolean ) {
    return this.httpClient.post<Page<Exploitation>>(this.url+"/rechercheBy",critereRecherche)
      .pipe(
        tap((res:Page<Exploitation>) => {
          this.setNbExploitations(res.totalElements)
          if(scroll){
          const result = Array.from(new Set([...this._Exploitations.getValue(),...res.content]));
            this.setExploitations(result);
          }else{
            this.setExploitations([...res.content]);
          }
        }),
        catchError((err) => {
          this.notification.error(" erreurr de recuperation Utilisateur ")
          return throwError(() => err)
        })
      )
  }
  removeExploitation(id: number) {
    const currents = this._Exploitations.getValue();
    const filtre=currents.find((res)=>res.id==id)
    const index=currents.indexOf(filtre)
    if(index!=-1){
      currents.splice(index,1)
      this._Exploitations.next(currents);
    }
  }
}
